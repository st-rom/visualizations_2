# -*- coding: utf-8 -*-
"""hw-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14tcmbXTRU8uQe-MEL6WTbATvJQfffOd-
"""

import altair as alt
import pandas as pd

alt.data_transformers.enable('default', max_rows=None)

df = pd.read_csv('https://gist.githubusercontent.com/andriy-gazin/f8f74625aeb3602850067fbb47bc1e4f/raw/05e5080840396deb084e90208dc8e76a75a980a3/pitchfork.csv')
df.head()

base = alt.Chart(df).properties(width=1200, height=400)
base_mini = alt.Chart(df).properties(width=700, height=200)

"""# Task 1

## <b>V1</b>
### 10 seperate graphs by genre
#### <b>Pros</b>
All the data at the same time, easy to distinguish(especially with tooltips)
#### <b>Cons</b>
Hard to compare between genres
"""

chart = base_mini.mark_circle(size = 250).encode(
    y = alt.Y('average(score)'),
    x = alt.X('count()'),
    tooltip = alt.Tooltip('date:T', timeUnit='year'),
    color = alt.Color('date:T', timeUnit='year', scale=alt.Scale(range=['green', 'yellow', 'blue']))
).facet('primary', columns=2)

chart

"""## <b>V2</b>
### Graph with details and tooltips
#### <b>Pros</b>
All the necessary data is present
#### <b>Cons</b>
Too much data, hard to follow and understand
"""

chart = base.mark_circle(size=80).encode(
    y = alt.Y('average(score)'),
    x = alt.X('count()'),
    detail = alt.Detail('date:T', timeUnit='year'),
    tooltip = alt.Tooltip('date:T', timeUnit='year'),
    color = alt.Color('primary')
)

chart

"""## <b>V3</b>
### Interactive graphs - click on upper's graph genre to get data by year in the lower graph (both graphs have tooltips)
#### <b>Pros</b>
Flexibility, not too much data
#### <b>Cons</b>
Takes time to get used to, hard to compare particular years
"""

selector = alt.selection_single(fields=['primary'])

base2 = alt.Chart(df).properties(
    width=1200,
    height=150
).add_selection(selector)

chart = base2.mark_circle(size = 500).encode(
    y = alt.Y('average(score)'),
    x = alt.X('count()'),
    tooltip = alt.Tooltip('primary'),
    color=alt.condition(selector, 'primary:N', alt.value('#f1e2cc')),
)

chart2 = base2.mark_circle(size = 200).encode(
    y = alt.Y('average(score)'),
    x = alt.X('count()'),
    tooltip = alt.Tooltip('date:T', timeUnit='year'),
    color=alt.Color('date:T', timeUnit='year', scale=alt.Scale(range=['green', 'yellow', 'blue']))
).transform_filter(selector)


chart & chart2

"""# Task 2"""

## <b>V1</b>

chart = base.mark_bar().encode(
    x = alt.X('artist:N',
        sort=alt.EncodingSortField(
            field="avg_score", op="mean", order="descending")
        ),
     y = alt.Y('avg_score:Q')
).transform_aggregate(
    avg_score='average(score)',
    groupby=['artist']
).transform_window(
    row_number='row_number(avg_score)', ignorePeers=True,
    sort=[alt.SortField('avg_score', order='descending')]
).transform_filter(
    (alt.datum.row_number <= 10)
)

chart

"""## <b>V2</b>"""

chart = base.properties(width=260).mark_bar().encode(
    y = alt.Y('artist:N',
        sort=alt.EncodingSortField(
            field="avg_score", op="mean", order="descending")
        ),
     x = alt.X('avg_score:Q')
).transform_aggregate(
    avg_score='average(score)',
    groupby=['artist']
).transform_window(
    row_number='row_number(avg_score)', ignorePeers=True,
    sort=[alt.SortField('avg_score', order='descending')]
).transform_filter(
    (alt.datum.row_number <= 10)
)

text_score = base.properties(width=260).mark_text(align='left', dx=3).encode(
    y = alt.Y('artist:N',
        sort=alt.EncodingSortField(
            field="avg_score", op="mean", order="descending")
        ),
     x = alt.X('avg_score:Q'),
     text = 'avg_score:Q'
).transform_aggregate(
    avg_score='average(score)',
    groupby=['artist']
).transform_window(
    row_number='row_number(avg_score)', ignorePeers=True,
    sort=[alt.SortField('avg_score', order='descending')]
).transform_filter(
    (alt.datum.row_number <= 10)
)

text_names = base.properties(width=260,title='').mark_text(align='right', dx=-3).encode(
    y = alt.Y('artist:N',
        sort=alt.EncodingSortField(
            field="avg_score", op="mean", order="descending"),
        axis=alt.Axis(labels=False)
        ),
     x = alt.X('avg_score:Q'),
     text = 'artist:N'
).transform_aggregate(
    avg_score='average(score)',
    groupby=['artist']
).transform_window(
    row_number='row_number(avg_score)', ignorePeers=True,
    sort=[alt.SortField('avg_score', order='descending')]
).transform_filter(
    (alt.datum.row_number <= 10)
)

chart + text_score + text_names

"""# Task 3

## Better version
"""

chart = base.mark_point().properties(width=400).encode(
    x = alt.X('score', bin=alt.Bin(step=0.5)),
     y = alt.Y('primary:N'),
     size = alt.Size('count()', scale=alt.Scale(range=[0, 500])),
     color = 'primary:N'
).transform_filter(
    (alt.datum.score <2 )
)

chart

"""## Other version"""

chart = base.mark_bar().properties(title='Number of overall records with score higher than 8 by style').encode(
    x = alt.X('primary:N',
        sort=alt.EncodingSortField(
            field="count", op="mean", order="descending")
        ),
     y = alt.Y('count:Q')
).transform_filter(
    (alt.datum.score > 8)
).transform_aggregate(
    count='count()',
    groupby=['primary']
)

chart

"""# Task 4

## Better version
"""

chart = base.properties(width=150).mark_bar().encode(
    x = alt.X('primary:N'),
     y = alt.Y('count()'),
     column = alt.Column('score', bin=alt.Bin(step = 0.5)),
     color = 'primary:N'
).transform_filter(
    (alt.datum.score < 2)
)

chart

"""## Other version"""

chart = base.mark_bar().properties(title='Number of overall records with score lower than 2 by style').encode(
    x = alt.X('primary:N',
        sort=alt.EncodingSortField(
            field="count", op="mean", order="ascending")),
     y = alt.Y('count:Q')
).transform_filter(
    (alt.datum.score < 2)
).transform_aggregate(
    count='count()',
    groupby=['primary']
)

chart

"""# Task 5"""

years = df['date'] = pd.to_datetime(df['date'])
years = years.map(lambda x: x.strftime('%Y')).unique()
chrts = []

for y in range(len(years)-1, -1, -1):
    chart = alt.Chart(df).mark_bar().encode(
        x = alt.X('primary:N', sort=alt.Sort(field='count', op='mean',  order='descending')),
        y = alt.Y('count:Q'),
        color = alt.Color('primary:N'),
        # column = alt.Column('date:T', timeUnit='year')
    )

    color = alt.Chart(df).mark_text(baseline='bottom').encode(
        x = alt.X('primary:N', sort=alt.Sort(field='count', op='mean',  order='descending')),
        y = alt.Y('count:Q'),
        text = 'count:Q',
        # column = alt.Column('date:T', timeUnit='year')
    )

    chrts.append((chart + color).properties(width = 280, title='Year ' + str(years[y])
    ).transform_calculate(year = 'year(datum.date)'
    ).transform_filter(
    alt.FieldOneOfPredicate(field='year', oneOf=[int(years[y])])
    ).transform_aggregate(
        count='count()',
        groupby=['primary']
    ))
    
alt.hconcat(*chrts)

base.mark_trail().encode(
    x = alt.X('date:T', timeUnit='year'),
    y = alt.Y('primary:N', sort=alt.Sort(op='count', order='descending')),
    detail = alt.Detail('primary'),
    size = alt.Size('count()', scale = alt.Scale(range = [1, 25])))









"""# Чернетка

# Task 1
## V4
Interactive
"""

import altair as alt

pts = alt.selection(type="single", encodings=['x'])

rect = alt.Chart(df).properties(width=1500, height=600).mark_rect().encode(
    alt.X('date:T', timeUnit='year', bin=True),
    alt.Y('score:Q', bin=True),
    alt.Color('count()',
        scale=alt.Scale(scheme='greenblue'),
        legend=alt.Legend(title='Total Records')
    )
)

circ = rect.mark_point().encode(
    alt.ColorValue('grey'),
    alt.Size('count()',
        legend=alt.Legend(title='Records in Selection')
    )
).transform_filter(
    pts
)

bar = alt.Chart(df).mark_bar().encode(
    x='primary:N',
    y='count()',
    color=alt.condition(pts, alt.ColorValue("steelblue"), alt.ColorValue("grey"))
).properties(
    width=950,
    height=200
).add_selection(pts)

alt.vconcat(
    rect + circ,
    bar
).resolve_legend(
    color="independent",
    size="independent"
)

selector = alt.selection_single(fields=['primary'])
selector2 = alt.selection_single(fields=['date'])

base = alt.Chart(df).properties(
    width=1200,
    height=150
).add_selection(selector).add_selection(selector2)

chart = base.mark_circle(size = 500).encode(
    y = alt.Y('average(score)'),
    # y = alt.Y('score', aggregate='mean', scale = alt.Scale(zero=False))
    x = alt.X('count()'),
    tooltip = alt.Tooltip('primary'),
    # color = alt.Color('date:T', timeUnit='year', scale=alt.Scale(scheme='brownbluegreen'))'basic', ['#f00', '#0f0', '#00f', '#ff0', '#f0f', '#0ff'])
    color=alt.condition(selector, 'primary:N', alt.value('#f1e2cc')),
).transform_filter(selector2)

chart2 = base.mark_circle(size = 200).encode(
    y = alt.Y('average(score)'),
    x = alt.X('count()'),
    tooltip = alt.Tooltip('date:T', timeUnit='year'),
    # color = alt.Color('date:T', timeUnit='year', scale=alt.Scale(scheme='brownbluegreen'))'basic', ['#f00', '#0f0', '#00f', '#ff0', '#f0f', '#0ff'])
    color=alt.condition(selector2, 'date:T', alt.value('#f1e2cc'), timeUnit='year', scale=alt.Scale(range=['green', 'yellow']))
).transform_filter(selector)


chart & chart2

# Histogram - distribution of score by genre

alt.Chart(df).mark_rect().encode(
    x = alt.X('date:T', timeUnit='year', bin = alt.Bin(step = 0.5)),
    y = alt.Y('count()'),
    color = alt.Color('primary')
).properties(width = 850)

selector = alt.selection_single(fields=['primary'])

base2 = alt.Chart(df).properties(
    width=1200,
    height=150
).encode(
    y = alt.Y('average(score)'),
    x = alt.X('count()')).add_selection(selector)

chart = base2.mark_circle(size = 500).encode(
    tooltip = alt.Tooltip('primary'),
    color=alt.condition(selector, 'primary:N', alt.value('#f1e2cc')),
)

chart2 = base2.mark_circle(size = 200).encode(
    tooltip = alt.Tooltip('date:T', timeUnit='year'),
    detail=alt.Detail('date:T', timeUnit='year')
).transform_filter(selector)


chart + chart2

alt.Chart(df).mark_rect().encode(
    x = alt.X('date:T', timeUnit='year'),
    y = alt.Y('primary', sort=alt.Sort(field='count()', op='mean',  order='descending')),
    color = alt.Color('count()', aggregate='mean', scale=alt.Scale(scheme='brownbluegreen'))
).properties(width = 800).transform_aggregate(count='count()', groupby=['primary', 'year(date)'])

